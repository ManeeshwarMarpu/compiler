//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  public static HashMap<String,ArrayList<String>> clstruct = new HashMap<String,ArrayList<String>>();
  public static HashMap<String,ArrayList<String>> fn_paramlist = new HashMap<String,ArrayList<String>>();
  public static HashMap<String,Integer> fnparam = new HashMap<String,Integer>();
  public static HashMap<String,String> cycExtd = new HashMap<String,String>();
  public static HashMap<String,String> var_type = new HashMap<String,String>();
  public static HashMap<String,String> fn_type = new HashMap<String,String>();
  public static ArrayList<String> ext_classes = new ArrayList<String>();
  public static HashMap<String,ArrayList<String>> fn_param_types = new HashMap<String,ArrayList<String>>();

  public static Stack<String> scope = new Stack<String>();
  public static HashMap<String,String> temps = new HashMap<String,String>();
  public Integer tempcount;
  public Integer loopcount;

  public static boolean isNumeric(String str)  
  {  
    try  
    {  
      int i = Integer.parseInt(str);  
    }  
    catch(NumberFormatException nfe)  
    {  
      return false;  
    }  
    return true;  
  }

  public void var_dec_global(String x){
    System.out.println();
    System.out.println("BEGIN");
    String currclass;
    currclass = scope.elementAt(0).toString();
    int ind = get_var_index(currclass,x);
    int tmp = tempcount;
    tempcount += 1;
    System.out.println("HLOAD TEMP "+tmp+"  TEMP 0 "+ind);
    System.out.println("RETURN TEMP "+tmp);
    System.out.println("END");
  }

  public Integer get_var_index(String cls, String var){
    //System.out.println("entered get_var_index with "+cls+","+var);
    ArrayList<String> arr = new ArrayList<String>();
    arr = clstruct.get(cls);
    int index = 4;
    for(String ext_cls : ext_classes){
      if(ext_cls.contains(cls)){
        ext_cls = ext_cls.substring(ext_cls.indexOf(cls));
        //System.out.println("|||||||||||||||"+ext_cls);
        for(String cls_tmp : ext_cls.split(":")){
          index = 4;
          String a = cls_tmp+"_"+var;
          for(String temp: arr){
            if(var_type.containsKey(temp)){
                //System.out.println("+++"+index);
                if(temp.equals(a)){
                  //System.out.println("---------------------------"+index);
                  return index;
                }
                index += 4;
            }
          }
        }
        System.out.println("ERROR: VAR NOT FOUND :"+var);      
        System.exit(0); 
      }
    }
    index = 4;
    String aa = cls+"_"+var;
    for(String temp: arr){
      if(var_type.containsKey(temp)){
          //System.out.println("+++"+index);
          if(temp.equals(aa)){
            //System.out.println("---------------------------"+index);
            return index;
          }
          index += 4;
      }
    }
    System.out.println("ERROR: VAR NOT FOUND :"+var);
    System.exit(0);
    
    return index;
  }

  public Integer get_fn_index(String cls, String fn){
    //System.out.println("entered get_fn_index with "+cls+","+fn);
    ArrayList<String> arr = new ArrayList<String>();
    int index;
    if(!clstruct.containsKey(cls)){
      String a,b,currclass;
      currclass = scope.elementAt(0);
      a = printstack()+cls;
      b = currclass + "_" + cls;
      if(var_type.containsKey(a)){
        cls = var_type.get(a);
        arr = clstruct.get(cls);
        index = 0;
        for(String temp: arr){
          if(fn_type.containsKey(temp)){
              if(temp.contains(fn)){
                //System.out.println("?????????????????"+index);
                return index;
              }
              index += 4;
          }
        }
        System.out.println("ERROR: FN NOT FOUND :"+fn);
        System.exit(0);
        return index;  
      }
      else if(var_type.containsKey(b)){
        cls = var_type.get(b);
        arr = clstruct.get(cls);
        index = 0;
        for(String temp: arr){
          if(fn_type.containsKey(temp)){
              if(temp.contains(fn)){
                //System.out.println("?????????????????"+index);
                return index;
              }
              index += 4;
          }
        }
        System.out.println("ERROR: FN NOT FOUND :"+fn);
        System.exit(0);
        return index;
      }
      else{
        for(String ext_cls : ext_classes){
          if(ext_cls.contains(currclass)){
            ext_cls = ext_cls.substring(ext_cls.indexOf(currclass));
            //System.out.println("----------------"+ext_cls);
            for(String cls_tmp : ext_cls.split(":")){
              b = cls_tmp+"_"+cls;
              //System.out.println("??????????========"+b);
              if(var_type.containsKey(b)){
                cls = var_type.get(b);
                arr = clstruct.get(cls);
                index = 0;
                for(String temp: arr){
                  if(fn_type.containsKey(temp)){
                      if(temp.contains(fn)){
                        //System.out.println("?????????????????"+index);
                        return index;
                      }
                      index += 4;
                  }
                }
                System.out.println("ERROR: FN NOT FOUND :"+fn);
                System.exit(0);
                return index;
              }
            }
          }
        }  
      }
      System.out.println("ERROR: class NOT FOUND :"+cls+","+fn);  
      System.exit(0);
    }
    arr = clstruct.get(cls);
    index = 0;
    for(String temp: arr){
      if(fn_type.containsKey(temp)){
          if(temp.contains(fn)){
            //System.out.println("?????????????????"+index);
            return index;
          }
          index += 4;
      }
    }
    System.out.println("ERROR: FN NOT FOUND :"+fn);
    System.exit(0);
    return index;  
  }

  public String get_temp(String s){
    //System.out.println("Entered get_temp with s = "+s);
    if(isNumeric(s)){
      //System.out.println("Returning num "+s);
      return s;
    }
    String sc = printstack();
    int l = sc.length();
    sc = sc.substring(0,l-1);
    if(fn_paramlist.containsKey(sc)){
      ArrayList<String> arr = new ArrayList<String>();
      arr = fn_paramlist.get(sc);
      for(int i=0;i<arr.size();i++){
        String t = arr.get(i);
        // if(t.contains(s)){
        //   //System.out.println("Returning "+s+","+("TEMP "+((Integer)(i+1)).toString()));
        //   return ("TEMP "+((Integer)(i+1)).toString());
        // }
        if(t.equals(printstack()+s)){
          String ans1 = ("TEMP "+((Integer)(i+1)).toString());
          //System.out.println("Returning "+s+","+ans1);
          return ans1;
        }
      }  
    }
    for(String t: temps.keySet()){
      // if(t.contains(s)){
      //   //System.out.println("Returning "+s+","+temps.get(t).toString());
      //   return temps.get(t).toString();
      // }
      if(t.equals(printstack()+s)){
        String ans = temps.get(t).toString();
        //System.out.println("Returning "+s+","+ans);
        return ans;
      }
    }
    //System.out.println("Returning null");
    return "";
  }


  public Integer halloc_size(String label, ArrayList<String> arr){
    int size;
    if(label.equals("vt")){
      int cls_fn_count = 0;
      for(String temp: arr){
        if(fn_type.containsKey(temp)){
          cls_fn_count += 1;
        }
      }
      size = ((cls_fn_count)*4); //(no. of var + vtable)*4  
    }
    else{
      int cls_var_count = 0;
      for(String temp: arr){
        if(var_type.containsKey(temp)){
          cls_var_count += 1;
        }
      }
      size = ((cls_var_count+1)*4); //(no. of var + vtable)*4  
    }
    return size;
  }

  public void fstore(Integer vtable,ArrayList<String> arr){
    int offset = 0;
    for(String temp: arr){
      if(fn_type.containsKey(temp)){
        System.out.println("  HSTORE TEMP "+vtable+" "+offset+" "+temp);
        offset += 4;
      }
    }
  }

  public void objstore(Integer obj, Integer vtable,ArrayList<String> arr, Integer obj_size){
    int offset = tempcount;
    tempcount += 1;
    System.out.println("MOVE TEMP "+offset+" 4");
    int l1 = loopcount;
    loopcount += 1;
    int l2 = loopcount;
    loopcount += 1;
    System.out.println("L"+l1+"  CJUMP  LE TEMP "+offset+"  "+(obj_size-1)+" L"+l2);
    System.out.println("  HSTORE  PLUS TEMP "+obj+" TEMP "+offset+"  0  0");
    System.out.println("  MOVE TEMP "+offset+"  PLUS TEMP "+offset+"  4");
    System.out.println("  JUMP L"+l1);
    System.out.println("L"+l2+"  HSTORE TEMP "+obj+"  0 TEMP "+vtable);
    return;
  }

  public String printstack(){
      String sum="";
      String a="";
      for(int i=0; i< scope.size(); i++){
         a=scope.elementAt(i);
         sum = sum + a + "_"; 
       }
      return sum;  
    }

  public GJDepthFirst(Maps map){
    super();
    this.var_type = map.AssVart();
    this.fn_type = map.AssFnt();
    this.clstruct = map.AssCls();
    this.cycExtd = map.AssCyc();
    this.fn_paramlist = map.AssFnpList();
    this.fnparam = map.AssFnp();
    this.ext_classes = map.AssextCls();
    //System.out.println("$$$$$$$$$$$$$$$$$$$$$$$"+ext_classes.toString());
    this.fn_param_types = map.Assfnpty();
    tempcount = 21;
    loopcount = 2;
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      String a;
      n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      a = n.f1.f0.toString();
      scope.push(a);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      scope.push("main");
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      scope.pop();
      n.f16.accept(this, argu);
      scope.pop();
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String a;
      n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      a = n.f1.f0.toString();
      scope.push(a);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String a;
      n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      a = n.f1.f0.toString();
      scope.push(a);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      scope.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      if(argu != null && argu.equals("assigntemp")){
        String a = n.f1.f0.toString();
        a = printstack() + a;
        String b = "TEMP "+tempcount;
        tempcount += 1;
        temps.put(a,b);
        //System.out.println("Putting "+a+","+b); 
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String a,fn;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //n.f2.accept(this, argu);
      a = n.f2.f0.toString();
      fn = printstack() + a;
      scope.push(a);
      Integer nfp = fnparam.get(fn) + 1;
      System.out.println(fn+" ["+nfp.toString()+"]");
      System.out.println("BEGIN ");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)("assigntemp"));
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.println("RETURN ");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("END ");
      scope.pop();
      temps.clear();
      //System.out.println("Cleared temps: "+temps.toString());
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String a,a_tmp,currclass,check;
      currclass = scope.elementAt(0).toString();
      a = n.f0.f0.toString();
      check = get_temp(a);
      if(!check.equals("")){
        a_tmp = check;
        System.out.print("  MOVE "+a_tmp+" ");
      }
      else{
        int var_index = get_var_index(currclass,a);
        System.out.print("  HSTORE TEMP 0 "+var_index+" ");
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which == 11){
        n.f2.accept(this, (A)("from_ass"));
      }
      else{
        n.f2.accept(this, argu);
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String a,check,a_tmp,tmp_arr,tmp_ind,tmp_ass;
      //n.f0.accept(this, argu);
      a = n.f0.f0.toString();
      int t = tempcount;
      tempcount += 1;
      tmp_arr = "TEMP "+((Integer)t).toString();
      check = get_temp(a); 
      System.out.print("  MOVE "+tmp_arr);
      if(!check.equals("")){
        a_tmp = check;
        System.out.println("  "+a_tmp);
      }
      else{
        var_dec_global(a);
      }
      n.f1.accept(this, argu);
      int t1 = tempcount;
      tempcount += 1;
      tmp_ind = "TEMP "+((Integer)t1).toString();
      System.out.print("  MOVE "+tmp_ind+"  ");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int t2 = tempcount;
      tempcount += 1;
      tmp_ass = "TEMP "+((Integer)t2).toString();
      System.out.print("  MOVE "+tmp_ass+"  ");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("  HSTORE PLUS "+tmp_arr+" TIMES 4 PLUS "+tmp_ind+" 1 0 "+tmp_ass);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("  CJUMP ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int lp = loopcount;
      loopcount += 1;
      System.out.println("  L"+lp);
      n.f4.accept(this, argu);
      System.out.println("L"+lp+" NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("  CJUMP ");
      int lp = loopcount;
      loopcount += 1;
      n.f1.accept(this, argu);
      if(n.f2.f0.which <= 1){
        n.f2.accept(this, (A)((Integer)lp));
      }
      else{
        n.f2.accept(this,argu);
      }      
      n.f3.accept(this, argu);
      if(n.f2.f0.which >1){
        System.out.println("  L"+lp);  
      }      
      n.f4.accept(this, argu);
      int lp1 = loopcount;
      loopcount += 1;
      System.out.println("  JUMP L"+lp1);
      n.f5.accept(this, argu);
      System.out.print("L"+lp+" ");
      n.f6.accept(this, argu);
      System.out.println("L"+lp1+"  NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      int lp = loopcount;
      loopcount += 1;
      System.out.println("L"+lp+" NOOP");
      System.out.print("  CJUMP ");
      int lp1 = loopcount;
      loopcount += 1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(n.f2.f0.which <= 1){
        n.f2.accept(this, (A)((Integer)lp1));
      }
      else{
        n.f2.accept(this,argu);
      }
      n.f3.accept(this, argu);
      if(n.f2.f0.which >1){
        System.out.println("  L"+lp1);  
      }
      n.f4.accept(this, argu);
      System.out.println("  JUMP L"+lp);
      System.out.println("L"+lp1+"  NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      System.out.print("  PRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      if(n.f0.which == 11){
        String x = n.f0.accept(this, argu).toString();
        if(!x.equals("dontprint")){
          String check = get_temp(x);
          if(!check.equals("")){
            x = check;
            System.out.println("  "+x);
          }
          else{
            var_dec_global(x);
          }
        }
      }
      else if(n.f0.which == 10 && argu != null && ((String)argu).equals("msg_getcls")){
        //System.out.println("===========================================");
        String c = n.f0.accept(this, argu).toString();
        _ret = (R)c;  
              
      }
      else{
        n.f0.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      int lp = (Integer)argu ;
      argu = null;
      n.f0.accept(this, argu);
      System.out.println(" L"+lp);
      n.f1.accept(this, argu);
      System.out.print("  CJUMP ");
      n.f2.accept(this, argu);
      System.out.println(" L"+lp);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      int lp = (Integer)argu ;
      argu = null;
      n.f0.accept(this, argu);
      System.out.println(" L"+lp);
      n.f1.accept(this, argu);
      System.out.print("  CJUMP ");
      n.f2.accept(this, argu);
      System.out.println(" L"+lp);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      System.out.print("  LE ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
        
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      System.out.print("  NE ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      System.out.print("  PLUS ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      System.out.print("  MINUS ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      System.out.print("  TIMES ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      System.out.print("  DIV ");
      String a,b,check;
      if(n.f0.f0.which != 8){
        a = n.f0.accept(this, argu).toString();
        check = get_temp(a);
        if(!check.equals("")){
          a = check;
          System.out.print(a+" ");
        }
        else{
          var_dec_global(a);
        }
      }
      else{
        n.f0.accept(this, argu);  
      }
      n.f1.accept(this, argu);
      if(n.f2.f0.which != 8){
        b = n.f2.accept(this, argu).toString();
        check = get_temp(b);
        if(!check.equals("")){
          b = check;
          System.out.println(b);
        }
        else{
          var_dec_global(b);
        }
      }
      else{
        n.f2.accept(this, argu);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      System.out.println();
      System.out.println("BEGIN");
      int t = tempcount;
      tempcount += 1; 
      String a,a_tmp,check,tmp_arr;
      tmp_arr = "TEMP "+((Integer)t).toString();
      a = n.f0.accept(this, argu).toString();
      check = get_temp(a);
      if(!check.equals("")){
          a_tmp = check;
          System.out.println("  MOVE "+tmp_arr+" "+a_tmp);
        }
      else{
        System.out.println("  MOVE "+tmp_arr);
        var_dec_global(a);
      }
      n.f1.accept(this, argu);
      int t1 = tempcount;
      tempcount += 1; 
      String a1,a_tmp1,check1,tmp_arr1;
      tmp_arr1 = "TEMP "+((Integer)t1).toString();
      a1 = n.f2.accept(this, argu).toString();
      //System.out.println("------------------"+a1);
      check1 = get_temp(a1);
      //System.out.println("++++++++++++ check1: "+check1);
      if(!check1.equals("")){
          a_tmp1 = check1;
          //System.out.println("========================="+a_tmp1);
          System.out.println("  MOVE "+tmp_arr1+" "+a_tmp1);
        }
      else{
        System.out.println("  MOVE "+tmp_arr1);
        var_dec_global(a1);
      }
      // System.out.println();
      // System.out.println("BEGIN");
      n.f3.accept(this, argu);
      int t2 = tempcount;
      tempcount += 1;
      int l2 = loopcount;
      loopcount += 1;
      int t3 = tempcount;
      tempcount += 1;
      int l3 = loopcount;
      loopcount += 1;
      System.out.println("  CJUMP TIMES LE MINUS 0 1 "+tmp_arr1+" LE "+tmp_arr1);
      System.out.println("    BEGIN HLOAD TEMP "+t2+" "+tmp_arr+" 0   RETURN TEMP "+t2+" END L"+l2);
      System.out.println("  HLOAD TEMP "+t3+" PLUS "+tmp_arr+" PLUS TIMES "+tmp_arr1+" 4 4 0");
      System.out.println("  JUMP L"+l3);
      System.out.println("L"+l2+" NOOP");
      System.out.println("  ERROR");
      System.out.println("L"+l3+" NOOP");
      System.out.println("RETURN TEMP "+t3);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      System.out.println();
      System.out.println("BEGIN");
      int t = tempcount;
      tempcount += 1; 
      String a,a_tmp,check,tmp_arr;
      tmp_arr = "TEMP "+((Integer)t).toString();
      a = n.f0.accept(this, argu).toString();
      check = get_temp(a);
      if(!check.equals("")){
          a_tmp = check;
          System.out.println("  MOVE "+tmp_arr+" "+a_tmp);
        }
      else{
        System.out.println("  MOVE "+tmp_arr);
        var_dec_global(a);
      }
      int t1 = tempcount;
      tempcount += 1;
      System.out.println("  HLOAD TEMP "+t1+" "+tmp_arr+" 0");
      System.out.println("RETURN");
      System.out.println("  TEMP "+t1);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      //System.out.println();
      System.out.println("CALL");
      System.out.println("BEGIN");
      
      String cls,fn,tmp_ob,tmp_vtable,tmp_fn;
      
      Integer temp_vt = tempcount;
      tempcount+=1;
      tmp_vtable = "TEMP "+temp_vt.toString();  //stores vt of created obj ptr

      Integer temp_fn = tempcount;
      tempcount+=1;
      tmp_fn = "TEMP "+temp_fn.toString();  //stores fn ptr from vt of created obj ptr

      Integer temp_obj = tempcount;
      tempcount+=1;
      tmp_ob = "TEMP "+temp_obj.toString();  //stores created obj ptr

      if(n.f0.f0.which == 8){
        System.out.println("  MOVE "+tmp_ob);
        cls = n.f0.accept(this,(A)"msg_getcls").toString();
      }
      else if(n.f0.f0.which == 3){
        cls = n.f0.accept(this, argu).toString();
        String check = get_temp(cls);
        if(!check.equals("")){
          System.out.println("  MOVE "+tmp_ob+" "+check);
        }
        else{
          System.out.println("  MOVE "+tmp_ob);
          var_dec_global(cls);
        }
      
      }
      else if(n.f0.f0.which == 4){  //this expr
        cls = scope.elementAt(0).toString();
        System.out.println("  MOVE "+tmp_ob+" TEMP 0");
      }
      else{
        //n.f0.f0.which == allocation exp || new CLS()
        System.out.println("  MOVE "+tmp_ob);
        cls = n.f0.accept(this, (A)"msgsend").toString();
      }
      System.out.println("  HLOAD "+tmp_vtable+" "+tmp_ob+" 0");
      n.f1.accept(this, argu);
      //n.f2.accept(this, argu);
      fn = n.f2.f0.toString();
      int fn_index = get_fn_index(cls,fn);
      System.out.println("  HLOAD "+tmp_fn+" "+tmp_vtable+" "+fn_index);
      n.f3.accept(this, argu);
      System.out.println("RETURN");
      System.out.println("  "+tmp_fn);
      System.out.println("END");
      System.out.print("( "+tmp_ob+" ");
      n.f4.accept(this, (A)("msg_this"));    
      System.out.println(" )");
      n.f5.accept(this, argu);
      if(argu != null && ((String)argu).equals("msg_getcls")){
        if(!clstruct.containsKey(cls)){
          String aa,bb;
          aa = printstack()+cls;
          bb = scope.elementAt(0).toString()+"_"+cls;
          if(var_type.containsKey(bb)){
            cls = var_type.get(bb);
          }
          else if(var_type.containsKey(aa)){
            cls = var_type.get(aa);
          }
          else{
            System.out.println("ERROR: class NOT FOUND :"+cls+","+fn);  
            System.exit(0);
          }  
        }
       
        String fn_key,fnty;
        fn_key = cls+"_"+fn;
        if(fn_type.containsKey(fn_key)){
          fnty = fn_type.get(fn_key);
          //System.out.println("************************************************"+fn_key+" : "+fnty);
          _ret = (R)fnty;
        }
        else{
          System.out.println("ERROR : msgsend fn not FOUND "+fn_key);
          System.exit(0);
        }  
            
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      System.out.print(" ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String arg = "";
      if(argu != null ){
        arg = (String)argu;
      }
      if(n.f0.which == 4 && argu != null && ((String)argu).equals("from_ass")){
        System.out.println("  TEMP 0");
        _ret = (R)("dontprint");
      }
      else if(n.f0.which == 4 && argu != null && ((String)argu).equals("msg_this")){
        System.out.println("  TEMP 0");
        _ret = (R)("dontprint");
      }
      else if(n.f0.which <= 3){
        _ret = (R)n.f0.accept(this, argu).toString();  
      }
      else if(arg.equals("msgsend")){
        _ret = (R)n.f0.accept(this, argu).toString();
      }
      else if(arg.equals("msg_getcls")){
        _ret = (R)n.f0.accept(this, argu).toString(); 
      }
      else{
        n.f0.accept(this, argu);
        _ret = (R)("dontprint");
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      //System.out.println(1);
      n.f0.accept(this, argu);
      _ret = (R)("1");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      //System.out.println(0);
      n.f0.accept(this, argu);
      _ret = (R)("0");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)("this");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      System.out.println();
      System.out.println("BEGIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int tmp_arr_size = tempcount;
      tempcount += 1;
      System.out.print("  MOVE TEMP "+tmp_arr_size+" ");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      int tmp_arr = tempcount;
      tempcount += 1;
      System.out.println("  MOVE TEMP "+tmp_arr+" HALLOCATE PLUS 4 TIMES 4 TEMP "+tmp_arr_size);
      int offset = tempcount;
      tempcount += 1;
      System.out.println("MOVE TEMP "+offset+" 4");
      int l1 = loopcount;
      loopcount += 1;
      int l2 = loopcount;
      loopcount += 1;
      System.out.println("L"+l1+"  CJUMP  LE TEMP "+offset+"  MINUS PLUS 4 TIMES 4 TEMP "+tmp_arr_size+" 1 L"+l2);
      System.out.println("  HSTORE  PLUS TEMP "+tmp_arr+" TEMP "+offset+"  0  0");
      System.out.println("  MOVE TEMP "+offset+"  PLUS TEMP "+offset+"  4");
      System.out.println("  JUMP L"+l1);
      System.out.println("L"+l2+"  HSTORE TEMP "+tmp_arr+"  0 TEMP "+tmp_arr_size);
      System.out.println("RETURN");
      System.out.println("  TEMP "+tmp_arr);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      String a;
      n.f0.accept(this, argu);
      //n.f1.accept(this, argu);
      a = n.f1.f0.toString();
      ArrayList<String> arr = new ArrayList<String>();
      arr = clstruct.get(a);
      System.out.println();
      System.out.println("BEGIN ");
      Integer vtable = tempcount;
      tempcount += 1;
      System.out.println("  MOVE TEMP "+vtable.toString()+" HALLOCATE "+halloc_size("vt",arr).toString());
      Integer obj = tempcount;
      System.out.println("  MOVE TEMP "+obj.toString()+" HALLOCATE "+halloc_size("obj",arr).toString());
      tempcount += 1;
      fstore(vtable,arr);//store fns in vtable;
      objstore(obj,vtable,arr,halloc_size("obj",arr));//store vt and class_vars in obj ptr;
      System.out.println("RETURN");
      System.out.println("  TEMP "+obj);
      System.out.println("END");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret = (R)(a);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("MINUS 1 ");
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(argu != null && ((String)argu).equals("msg_getcls")){
        _ret = (R)n.f1.accept(this, argu).toString();
      }
      else{
        n.f1.accept(this, argu);  
      }
      n.f2.accept(this, argu);      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
