//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

  Integer tempcount;

  public GJDepthFirst(Integer tempMax){
    this.tempcount = tempMax+1;
  }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MAIN");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)("print_label"));
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label,num,stmtex;
      label = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      num = n.f2.accept(this, argu).toString();
      n.f3.accept(this, argu);
      System.out.println(label+"["+num+"]");
      System.out.println("BEGIN");
      stmtex = n.f4.accept(this, argu).toString();
      System.out.println("RETURN  "+stmtex);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      if(argu != null && ((String)argu).equals("print_label")){
        argu = null;
      }
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("  ERROR ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String exp,label;
      n.f0.accept(this, argu);
      exp = n.f1.accept(this, argu).toString();
      label = n.f2.accept(this, argu).toString();
      System.out.println("  CJUMP "+exp+" "+label+" ");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = n.f1.accept(this, argu).toString();
      System.out.println("  JUMP "+label+" ");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String ex1,in,ex2;
      n.f0.accept(this, argu);
      ex1 = n.f1.accept(this, argu).toString();
      in = n.f2.accept(this, argu).toString();
      ex2 = n.f3.accept(this, argu).toString();
      System.out.println("  HSTORE "+ex1+" "+in+" "+ex2+" ");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String tmp,ex,in;
      n.f0.accept(this, argu);
      tmp = n.f1.accept(this, argu).toString();
      ex = n.f2.accept(this, argu).toString();
      in = n.f3.accept(this, argu).toString();
      System.out.println("  HLOAD "+tmp+" "+ex+" "+in+" ");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String tmp,ex;
      n.f0.accept(this, argu);
      tmp = n.f1.accept(this, argu).toString();
      ex = n.f2.accept(this, argu).toString();
      System.out.println("  MOVE "+tmp+" "+ex+" ");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String ex;
      n.f0.accept(this, argu);
      ex = n.f1.accept(this, argu).toString();
      System.out.println("  PRINT "+ex+" ");
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      // if(n.f0.which == 5 || n.f0.which == 6){
      //   Integer tc = tempcount;
      //   String a = n.f0.accept(this, argu).toString();
      //   System.out.println("  MOVE TEMP "+tc+" "+a+" ");
      //   tempcount += 1;  
      //   _ret = (R)("TEMP "+tc.toString());
      // }
      boolean flag = false;
      if(argu != null){
        flag = true;
      }
      _ret = (R)n.f0.accept(this, null).toString();
      
      if(flag){
        ((ArrayList<String>)argu).add(_ret.toString());
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String ex = n.f3.accept(this, argu).toString();
      n.f4.accept(this, argu);
      _ret = (R)ex;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      Integer tc = tempcount;
      tempcount += 1;
      String ex1;
      n.f0.accept(this, argu);
      ex1 = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      ArrayList<String> exlist = new ArrayList<String>();
      n.f3.accept(this, (A)exlist);
      n.f4.accept(this, argu);
      System.out.print("  MOVE TEMP "+tc+" CALL "+ex1+" ( ");
      for(String exp : exlist){
        System.out.print(exp+" ");
      }
      System.out.println(")");
      _ret = (R)("TEMP "+tc.toString());
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      Integer tc = tempcount;
      tempcount += 1;
      n.f0.accept(this, argu);
      String ex = n.f1.accept(this, argu).toString();
      System.out.println("  MOVE TEMP "+tc+" HALLOCATE "+ex);
      _ret = (R)("TEMP "+tc.toString());
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      Integer tc = tempcount;
      tempcount += 1;
      String op,ex1,ex2;
      op = n.f0.accept(this, argu).toString();
      ex1 = n.f1.accept(this, argu).toString();
      ex2 = n.f2.accept(this, argu).toString();
      System.out.println("  MOVE TEMP "+tc+" "+op+" "+ex1+" "+ex2);
      _ret = (R)("TEMP "+tc.toString());
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which){
        case 0:
          _ret = (R)("LE ");
          break;
        case 1:
          _ret = (R)("NE ");
          break;
        case 2:
          _ret = (R)("PLUS ");
          break;
        case 3:
          _ret = (R)("MINUS ");
          break;
        case 4:
          _ret = (R)("TIMES ");
          break;
        case 5:
          _ret = (R)("DIV ");
          break;
        default:
          System.out.println("ERROR");
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      String a;
      n.f0.accept(this, argu);
      a = n.f1.accept(this, argu).toString();
      _ret = (R)("  TEMP "+a);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String a = n.f0.toString();
      if(argu != null && ((String)argu).equals("print_label")){
        System.out.print(a+"    ");
      }
      _ret = (R)a;
      return _ret;
   }

}
